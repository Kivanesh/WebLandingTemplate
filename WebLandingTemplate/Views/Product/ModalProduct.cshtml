@model WebLandingTemplate.Models.ProductVM

<div class="modal-body form-control-file">
    <div class="row-fluid form-group col-md-12">

        <div class="row">
            <div class="portlet-box portlet-gutter ui-buttons-col mb-30">
                <div class="portlet-header flex-row flex d-flex align-items-center b-b">
                    <div class="flex d-flex flex-column">
                        <h3>@ViewBag.ModalName</h3>
                    </div>
                </div>
                <div class="portlet-body">
                    <form method="post" action="@Url.Action(""+ViewBag.GoTo+"", "Product")" enctype="multipart/form-data" id="supplier-form">

                        @if (ViewBag.GoTo == "Create")
                        {
                            <div class="form-body">
                                <div class="form-row">
                                    <div class="col-md-5 mb-3">
                                        <div class="input-icon-group">
                                            @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="input-icon-append">
                                                <i class="fa fa-user"></i>
                                                @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-5 mb-3">
                                        <div class="input-icon-group">
                                            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="input-icon-append">
                                                <i class="fa fa-user"></i>
                                                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-5 mb-3">
                                        <div class="input-icon-group">
                                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="input-icon-append">
                                                <i class="fa fa-user"></i>
                                                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-5 mb-3">
                                        <div class="input-icon-group">
                                            @Html.LabelFor(model => model.Size, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="input-icon-append">
                                                <i class="fa fa-user"></i>
                                                @Html.EditorFor(model => model.Size, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.Size, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-5 mb-3">
                                        <div class="input-icon-group">
                                            @Html.LabelFor(model => model.Color, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="input-icon-append">
                                                <i class="fa fa-user"></i>
                                                @Html.EditorFor(model => model.Color, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.Color, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-5 mb-3">
                                        <div class="input-icon-group">
                                            @Html.LabelFor(model => model.ProductType, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="input-icon-append">
                                                <i class="fa fa-user"></i>
                                                @Html.EditorFor(model => model.ProductType, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.ProductType, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>


                                </div><!--row-->

                                <div class="result"></div><!-- end .result  section -->
                            </div><!-- end .form-body section -->
                        }
                        @if (ViewBag.GoTo == "Details")
                        {
                            <div class="form-body">
                                <div class="form-row">
                                    <div class="col-md-5 mb-3">
                                        <div class="input-icon-group">
                                            @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="input-icon-append">
                                                <i class="fa fa-user"></i>
                                                @Html.DisplayFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })

                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-5 mb-3">
                                        <div class="input-icon-group">
                                            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="input-icon-append">
                                                <i class="fa fa-user"></i>
                                                @Html.DisplayFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })

                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-5 mb-3">
                                        <div class="input-icon-group">
                                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="input-icon-append">
                                                <i class="fa fa-user"></i>
                                                @Html.DisplayFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })

                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-5 mb-3">
                                        <div class="input-icon-group">
                                            @Html.LabelFor(model => model.Size, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="input-icon-append">
                                                <i class="fa fa-user"></i>
                                                @Html.DisplayFor(model => model.Size, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })

                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-5 mb-3">
                                        <div class="input-icon-group">
                                            @Html.LabelFor(model => model.Color, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="input-icon-append">
                                                <i class="fa fa-user"></i>
                                                @Html.DisplayFor(model => model.Color, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })

                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-5 mb-3">
                                        <div class="input-icon-group">
                                            @Html.LabelFor(model => model.ProductType, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="input-icon-append">
                                                <i class="fa fa-user"></i>
                                                @Html.DisplayFor(model => model.ProductType, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })

                                            </div>
                                        </div>
                                    </div>

                                </div><!--row-->
                                <div class="result"></div><!-- end .result  section -->
                            </div>
                        }
                        @if (ViewBag.GoTo == "Edit")
                        {
                            <div class="form-body">
                                <div class="form-row">
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    @Html.HiddenFor(model => model.ProductId)
                                    <div class="col-md-5 mb-3">
                                        <div class="input-icon-group">
                                            @Html.LabelFor(model => model.ProductName, "Nombre", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="input-icon-append">
                                                <i class="fa fa-user"></i>
                                                @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })

                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-5 mb-3">
                                        <div class="input-icon-group">
                                            @Html.LabelFor(model => model.Price, "Precio", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="input-icon-append">
                                                <i class="fa fa-user"></i>
                                                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-5 mb-3">
                                        <div class="input-icon-group">
                                            @Html.LabelFor(model => model.Description, "Descripción", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="input-icon-append">
                                                <i class="fa fa-user"></i>
                                                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-5 mb-3">
                                        <div class="input-icon-group">
                                            @Html.LabelFor(model => model.Size, "Tamaño", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="input-icon-append">
                                                <i class="fa fa-user"></i>
                                                @Html.EditorFor(model => model.Size, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.Size, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-5 mb-3">
                                        <div class="input-icon-group">
                                            @Html.LabelFor(model => model.Size, "Tamaño", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="input-icon-append">
                                                <i class="fa fa-user"></i>
                                                @Html.EditorFor(model => model.Size, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.Size, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-5 mb-3">
                                        <div class="input-icon-group">
                                            @Html.LabelFor(model => model.ProductType, "Tipo", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="input-icon-append">
                                                <i class="fa fa-user"></i>
                                                @Html.EditorFor(model => model.ProductType, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.ProductType, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <!--Aqui abajo va el código-->

                                </div><!--row-->
                                <div class="result"></div><!-- end .result  section -->
                            </div>
                        }


                        @if (ViewBag.GoTo != "Details")
                        {
                            <div class="form-footer">
                                <div class="float-left">
                                    <button type="submit" data-btntext-sending="Sending..." class="button btn btn-primary"><span><i class="fa fa-paper-plane" aria-hidden="true"></i> </span>Enviar</button>
                                </div>
                            </div><!-- end .form-footer section -->
                        }





                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="row-fluid">
        <div class="modal-footer">
            <button type="button" id="CancelModal" class="button btn-danger rounded" data-dismiss="modal"><span><i class="fa fa-window-close" aria-hidden="true"></i> </span>Cerrar</button>
        </div>
    </div>


</div>




<script type="text/javascript">
    function fileValidation() {
        var fileInput = document.getElementById('file');
        var filePath = fileInput.value;
        var allowedExtensions = /(.jpg|.jpeg|.png)$/i;
        if (!allowedExtensions.exec(filePath)) {
            alert('Seleccione solo archivos con extensión .jpeg/.jpg/.png .');
            fileInput.value = '';
            return false;
        } /*else {
            //Image preview
            if (fileInput.files && fileInput.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    document.getElementById('imagePreview').innerHTML = '<img src="' + e.target.result + '" />';
                };
                reader.readAsDataURL(fileInput.files[0]);
            }
        }*/
    }
</script>
<script type="text/javascript">

        jQuery(document).ready(function ($) {



            $("#supplier-form").validate({
                /* validation states + elements
                ------------------------------------------- */
                errorClass: "error",
                validClass: "valid",
                errorElement: "em",
                onkeyup: false,
                onclick: false,
                /* validation rules
                ------------------------------------------ */
                rules: {
                    Name: {
                        required: true,
                        minlength: 1
                    },
                    Description: {
                        required: false,
                    },

                },
                messages: {
                    categoryname: {
                        required: 'Ingresa el nombre',
                        minlength: 'El nombre debe contener al menos {0} caracteres'
                    },
                    Description: {
                        required: 'Ingresa la descripción',
                        minlength: 'La descripción debe contener al menos {0} caracteres',

                        default: 'Enter a VALID option'
                    }

                },
                /* validation highlighting + error placement
                ---------------------------------------------------- */
                highlight: function (element, errorClass, validClass) {
                    $(element).addClass(errorClass).removeClass(validClass);
                },
                unhighlight: function (element, errorClass, validClass) {
                    $(element).removeClass(errorClass).addClass(validClass);

                },
                errorPlacement: function (error, element) {
                    if (element.is(":radio") || element.is(":checkbox")) {
                        console.log("This shit Get into The Validation: 3");
                        element.closest('.option-group').after(error);

                    } else {
                        console.log("This shit Get into The Validation: 4");
                        error.insertAfter(element.parent());
                    }
                },

                /* ajax form submition
                ---------------------------------------------------- */
                //                  submitHandler: function (form) {
                //                    /*---------------------------------------------------- Build Model from InputForm Template ADD by Kvnsh */
                //                      //var itemVM = {

                //                      //}
                //                      //var messageVM = {
                //                      //    Subject : sendersubject.value,
                //                      //    Email : emailaddress.value,
                //                      //    ContactName : sendername.value,
                //                      //    Message : sendermessage.value,
                //                      //    Phone: senderphone.value,
                //                      //    ContactDate: document.getElementById("messageVM_ContactDate").value,
                //                      //    ComeFrom: document.getElementById("messageVM_ComeFrom").value
                //                      //}
                //                      //var PageVM = {
                //                      //    "messageVM" : messageVM
                //                      //}
                //                      //console.log(PageVM);
                //                      console.log('HeRe are You u.u');
                //                      console.log(form);
                //                       /*---------------------------------------------------- */
                //                      $(form).ajaxSubmit({
                //                              data: form,
                //		    target:'.result',
                //			beforeSubmit:function(){
                //					swapButton();
                //					$('.form-footer').addClass('progress');
                //			},
                //			error:function(){
                //					swapButton();
                //					$('.form-footer').removeClass('progress');
                //			},
                //			 success:function(){
                //				 	swapButton();
                //					$('.form-footer').removeClass('progress');
                //					$('.alert-success').show().delay(7000).fadeOut();
                //					$('.field').removeClass("state-error, state-success");
                //					if( $('.alert-error').length == 0){
                //						$('#smart-form').resetForm();
                //						reloadCaptcha();
                //					}
                //			 }
                //	  });
                //}

            }); //----> End Category Validate



        });

</script>







































